cmake_minimum_required (VERSION 3.16)
cmake_policy(SET CMP0048 NEW)
project(GPURecSplit LANGUAGES CXX)

include (CheckLanguage)
check_language(CUDA)
if (CMAKE_CUDA_COMPILER)
	enable_language(CUDA)
endif()

include_directories(.)

# ---------------------------- Standard RecSplit ----------------------------------------------------------

add_executable(recsplit_dump128 benchmark/function/recsplit_dump128.cpp)
target_compile_features(recsplit_dump128 PRIVATE cxx_std_17)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(recsplit_dump128 PRIVATE -Wall -Wextra -march=native)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(recsplit_dump128 PRIVATE /constexpr:steps10000000)
endif()

add_executable(recsplit_interactive test/interactive.cpp)
target_compile_features(recsplit_interactive PRIVATE cxx_std_17)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(recsplit_interactive PRIVATE -Wall -Wextra -march=native)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(recsplit_interactive PRIVATE /constexpr:steps10000000)
endif()

add_executable(recsplit_correctness test/correctness.cpp)
target_compile_features(recsplit_correctness PRIVATE cxx_std_17)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(recsplit_correctness PRIVATE -Wall -Wextra -march=native)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(recsplit_correctness PRIVATE /constexpr:steps10000000)
	target_include_directories(recsplit_correctness PRIVATE src/support)
endif()

add_executable(recsplit_construction benchmark/function/benchmark_construction.cpp)
target_compile_features(recsplit_construction PRIVATE cxx_std_17)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(recsplit_construction PRIVATE -Wall -Wextra -march=native)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(recsplit_construction PRIVATE /constexpr:steps10000000)
endif()

# ---------------------------- GPURecSplit ----------------------------------------------------------------

if (CMAKE_CUDA_COMPILER)
	add_executable(gpurecsplit_dump128 benchmark/function/recsplit_dump128.cu)
	target_compile_features(gpurecsplit_dump128 PRIVATE cxx_std_17)
	target_compile_options(gpurecsplit_dump128 PRIVATE --expt-relaxed-constexpr)
	set_target_properties(gpurecsplit_dump128 PROPERTIES CUDA_SEPERABLE_COMPILATION ON)
	set_property(TARGET gpurecsplit_dump128 PROPERTY CUDA_ARCHITECTURES 61-virtual)
	if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
		target_compile_options(gpurecsplit_dump128 PRIVATE -Wall -Wextra -march=native)
		target_link_options(gpurecsplit_dump128 PRIVATE -pthread)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		target_compile_options(gpurecsplit_dump128 PRIVATE -constexpr:steps10000000 -arch:AVX2 -DINSTRSET=8)
		target_include_directories(gpurecsplit_dump128 PRIVATE src/support)
	endif()
	
	add_executable(gpurecsplit_interactive test/interactive.cu)
	target_compile_features(gpurecsplit_interactive PRIVATE cxx_std_17)
	target_compile_options(gpurecsplit_interactive PRIVATE --expt-relaxed-constexpr)
	set_target_properties(gpurecsplit_interactive PROPERTIES CUDA_SEPERABLE_COMPILATION ON)
	set_property(TARGET gpurecsplit_interactive PROPERTY CUDA_ARCHITECTURES 61-virtual)
	if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
		target_compile_options(gpurecsplit_interactive PRIVATE -Wall -Wextra -march=native)
		target_link_options(gpurecsplit_interactive PRIVATE -pthread)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		target_compile_options(gpurecsplit_interactive PRIVATE -constexpr:steps10000000 -arch:AVX2 -DINSTRSET=8)
		target_include_directories(gpurecsplit_interactive PRIVATE src/support)
	endif()

	add_executable(gpurecsplit_correctness test/correctness.cu)
	target_compile_features(gpurecsplit_correctness PRIVATE cxx_std_17)
	target_compile_options(gpurecsplit_correctness PRIVATE --expt-relaxed-constexpr)
	set_target_properties(gpurecsplit_correctness PROPERTIES CUDA_SEPERABLE_COMPILATION ON)
	set_property(TARGET gpurecsplit_correctness PROPERTY CUDA_ARCHITECTURES 61-virtual)
	if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
		target_compile_options(gpurecsplit_correctness PRIVATE -Wall -Wextra -march=native)
		target_link_options(gpurecsplit_correctness PRIVATE -pthread)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		target_compile_options(gpurecsplit_correctness PRIVATE -constexpr:steps10000000 -arch:AVX2 -DINSTRSET=8)
		target_include_directories(gpurecsplit_correctness PRIVATE src/support)
	endif()
	
	add_executable(gpurecsplit_construction benchmark/function/benchmark_construction.cu)
	target_compile_features(gpurecsplit_construction PRIVATE cxx_std_17)
	target_compile_options(gpurecsplit_construction PRIVATE --expt-relaxed-constexpr)
	set_target_properties(gpurecsplit_construction PROPERTIES CUDA_SEPERABLE_COMPILATION ON)
	set_property(TARGET gpurecsplit_construction PROPERTY CUDA_ARCHITECTURES 61-virtual)
	if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
		target_compile_options(gpurecsplit_construction PRIVATE -Wall -Wextra -march=native)
		target_link_options(gpurecsplit_construction PRIVATE -pthread)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		target_compile_options(gpurecsplit_construction PRIVATE -constexpr:steps10000000 -arch:AVX2 -DINSTRSET=8)
		target_include_directories(gpurecsplit_construction PRIVATE src/support)
	endif()
	
	add_executable(gpu_simd_equivalence test/GPUandSIMDequivalence.cu)
	target_compile_features(gpu_simd_equivalence PRIVATE cxx_std_17)
	target_compile_options(gpu_simd_equivalence PRIVATE --expt-relaxed-constexpr)
	set_target_properties(gpu_simd_equivalence PROPERTIES CUDA_SEPERABLE_COMPILATION ON)
	set_property(TARGET gpu_simd_equivalence PROPERTY CUDA_ARCHITECTURES 61-virtual)
	if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
		target_compile_options(gpu_simd_equivalence PRIVATE -Wall -Wextra -march=native)
		target_link_options(gpu_simd_equivalence PRIVATE -pthread)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		target_compile_options(gpu_simd_equivalence PRIVATE -constexpr:steps10000000 -arch:AVX2 -DINSTRSET=8)
		target_include_directories(gpu_simd_equivalence PRIVATE src/support)
	endif()
endif()

# ---------------------------- SIMDRecSplit ---------------------------------------------------------------

add_executable(simdrecsplit_dump128 benchmark/function/recsplit_dump128.cpp)
target_compile_features(simdrecsplit_dump128 PRIVATE cxx_std_17)
target_compile_options(simdrecsplit_dump128 PRIVATE -DSIMD)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(simdrecsplit_dump128 PRIVATE -Wall -Wextra -march=native)
	target_link_options(simdrecsplit_dump128 PRIVATE -pthread)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(simdrecsplit_dump128 PRIVATE /constexpr:steps10000000 /arch:AVX2 /DINSTRSET=8)
endif()

add_executable(simdrecsplit_interactive test/interactive.cpp)
target_compile_features(simdrecsplit_interactive PRIVATE cxx_std_17)
target_compile_options(simdrecsplit_interactive PRIVATE -DSIMD)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(simdrecsplit_interactive PRIVATE -Wall -Wextra -march=native)
	target_link_options(simdrecsplit_interactive PRIVATE -pthread)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(simdrecsplit_interactive PRIVATE /constexpr:steps10000000 /arch:AVX2 /DINSTRSET=8)
endif()

add_executable(simdrecsplit_correctness test/correctness.cpp)
target_compile_features(simdrecsplit_correctness PRIVATE cxx_std_17)
target_compile_options(simdrecsplit_correctness PRIVATE -DSIMD)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(simdrecsplit_correctness PRIVATE -Wall -Wextra -march=native)
	target_link_options(simdrecsplit_correctness PRIVATE -pthread)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(simdrecsplit_correctness PRIVATE /constexpr:steps10000000 /arch:AVX2 /DINSTRSET=8)
	target_include_directories(simdrecsplit_correctness PRIVATE src/support)
endif()

add_executable(simdrecsplit_construction benchmark/function/benchmark_construction.cpp)
target_compile_features(simdrecsplit_construction PRIVATE cxx_std_17)
target_compile_options(simdrecsplit_construction PRIVATE -DSIMD)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
	target_compile_options(simdrecsplit_construction PRIVATE -Wall -Wextra -march=native)
	target_link_options(simdrecsplit_construction PRIVATE -pthread)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	target_compile_options(simdrecsplit_construction PRIVATE /constexpr:steps10000000 /arch:AVX2 /DINSTRSET=8)
	target_include_directories(simdrecsplit_construction PRIVATE src/support)
endif()
